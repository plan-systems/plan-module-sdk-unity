// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: crates/crates.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PlanSDK.Crates {

  /// <summary>Holder for reflection information generated from crates/crates.proto</summary>
  public static partial class CratesReflection {

    #region Descriptor
    /// <summary>File descriptor for crates/crates.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CratesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNjcmF0ZXMvY3JhdGVzLnByb3RvEgZjcmF0ZXMi/AEKCkFzc2V0RW50cnkS",
            "JgoKQXNzZXRGbGFncxgBIAEoDjISLmNyYXRlcy5Bc3NldEZsYWdzEgsKA1VS",
            "SRgCIAEoCRINCgVUaXRsZRgDIAEoCRIOCgZOYW1lSUQYBCABKAkSDwoHQ2Vu",
            "dGVyWBgFIAEoAhIPCgdDZW50ZXJZGAYgASgCEg8KB0NlbnRlcloYByABKAIS",
            "EAoIRXh0ZW50c1gYCiABKAISEAoIRXh0ZW50c1kYCyABKAISEAoIRXh0ZW50",
            "c1oYDCABKAISEAoITG9jYWxVUkkYHiABKAkSDAoEVGFncxgfIAEoCRIRCglT",
            "aG9ydERlc2MYICABKAkikQEKDkJ1bmRsZU1hbmlmZXN0EhMKC1BhcmVudENy",
            "YXRlGAEgASgJEhgKEEJ1bmRsZVB1YmxpY05hbWUYAiABKAkSFwoPQnVuZGxl",
            "QnVpbGROYW1lGAMgASgJEiIKBkFzc2V0cxgKIAMoCzISLmNyYXRlcy5Bc3Nl",
            "dEVudHJ5EhMKC0xvYWRBbGxIaW50GBQgASgIIrEBCg1DcmF0ZU1hbmlmZXN0",
            "EhIKCkhvbWVEb21haW4YASABKAkSEgoKQ3JhdGVUaXRsZRgCIAEoCRITCgtD",
            "cmF0ZU5hbWVJRBgDIAEoCRIPCgdCdWlsZElEGAQgASgJEhIKCkNyZWF0ZURl",
            "c2MYBSABKAkSFQoNQnJvd3NlckJ1bmRsZRgIIAEoCRInCgdCdW5kbGVzGAog",
            "AygLMhYuY3JhdGVzLkJ1bmRsZU1hbmlmZXN0KsEBCgpBc3NldEZsYWdzEgsK",
            "B05vRmxhZ3MQABILCgdJc1RleDJEEAESDAoISXNTcHJpdGUQAhIOCgpJc01h",
            "dGVyaWFsEAQSDwoLSXNQbGFjZWFibGUQCBITCg9Jc1JlY3RUcmFuc2Zvcm0Q",
            "EBIICgRJc1VJECASDAoHSGFzSWNvbhCAAhIOCglJc1ByaXZhdGUQgAQSDQoI",
            "SXNTa3lib3gQgAgSDgoJQXV0b1NjYWxlEIAQEg4KCUlzU3VyZmFjZRCAIEIR",
            "qgIOUGxhblNESy5DcmF0ZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PlanSDK.Crates.AssetFlags), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PlanSDK.Crates.AssetEntry), global::PlanSDK.Crates.AssetEntry.Parser, new[]{ "AssetFlags", "URI", "Title", "NameID", "CenterX", "CenterY", "CenterZ", "ExtentsX", "ExtentsY", "ExtentsZ", "LocalURI", "Tags", "ShortDesc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlanSDK.Crates.BundleManifest), global::PlanSDK.Crates.BundleManifest.Parser, new[]{ "ParentCrate", "BundlePublicName", "BundleBuildName", "Assets", "LoadAllHint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlanSDK.Crates.CrateManifest), global::PlanSDK.Crates.CrateManifest.Parser, new[]{ "HomeDomain", "CrateTitle", "CrateNameID", "BuildID", "CreateDesc", "BrowserBundle", "Bundles" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// AssetFlags describes what kind of asset this is.
  /// </summary>
  public enum AssetFlags {
    [pbr::OriginalName("NoFlags")] NoFlags = 0,
    [pbr::OriginalName("IsTex2D")] IsTex2D = 1,
    [pbr::OriginalName("IsSprite")] IsSprite = 2,
    [pbr::OriginalName("IsMaterial")] IsMaterial = 4,
    [pbr::OriginalName("IsPlaceable")] IsPlaceable = 8,
    [pbr::OriginalName("IsRectTransform")] IsRectTransform = 16,
    /// <summary>
    /// Is UI means that this item is for UI/UX and meets additional requirements.
    /// </summary>
    [pbr::OriginalName("IsUI")] IsUi = 32,
    /// <summary>
    /// HasIcon means that this Asset includes an icon with the same name (and has IsIcon set),
    /// </summary>
    [pbr::OriginalName("HasIcon")] HasIcon = 256,
    /// <summary>
    /// IsPrivate means this item is not intended for general use and is not normally visible. 
    /// </summary>
    [pbr::OriginalName("IsPrivate")] IsPrivate = 512,
    /// <summary>
    /// IsSkybox means this is a transform containing a Skybox component.
    /// </summary>
    [pbr::OriginalName("IsSkybox")] IsSkybox = 1024,
    /// <summary>
    /// AutoScale means this asset should be placed with auto scale enabled by default.
    /// </summary>
    [pbr::OriginalName("AutoScale")] AutoScale = 2048,
    /// <summary>
    /// IsSurface means this asset behaves like terrain and/or should be considered a constituent part of a scene.
    /// These objects should be opaque and have colliders attached to them
    /// e.g.  a building, a terrain formation, a wall
    /// </summary>
    [pbr::OriginalName("IsSurface")] IsSurface = 4096,
  }

  #endregion

  #region Messages
  public sealed partial class AssetEntry : pb::IMessage<AssetEntry> {
    private static readonly pb::MessageParser<AssetEntry> _parser = new pb::MessageParser<AssetEntry>(() => new AssetEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlanSDK.Crates.CratesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEntry(AssetEntry other) : this() {
      assetFlags_ = other.assetFlags_;
      uRI_ = other.uRI_;
      title_ = other.title_;
      nameID_ = other.nameID_;
      centerX_ = other.centerX_;
      centerY_ = other.centerY_;
      centerZ_ = other.centerZ_;
      extentsX_ = other.extentsX_;
      extentsY_ = other.extentsY_;
      extentsZ_ = other.extentsZ_;
      localURI_ = other.localURI_;
      tags_ = other.tags_;
      shortDesc_ = other.shortDesc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEntry Clone() {
      return new AssetEntry(this);
    }

    /// <summary>Field number for the "AssetFlags" field.</summary>
    public const int AssetFlagsFieldNumber = 1;
    private global::PlanSDK.Crates.AssetFlags assetFlags_ = global::PlanSDK.Crates.AssetFlags.NoFlags;
    /// <summary>
    /// Flags specifies properties about this asset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlanSDK.Crates.AssetFlags AssetFlags {
      get { return assetFlags_; }
      set {
        assetFlags_ = value;
      }
    }

    /// <summary>Field number for the "URI" field.</summary>
    public const int URIFieldNumber = 2;
    private string uRI_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URI {
      get { return uRI_; }
      set {
        uRI_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NameID" field.</summary>
    public const int NameIDFieldNumber = 4;
    private string nameID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameID {
      get { return nameID_; }
      set {
        nameID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CenterX" field.</summary>
    public const int CenterXFieldNumber = 5;
    private float centerX_;
    /// <summary>
    /// CenterX and CenterZ specify the positional center of this asset (and are typically 0).
    /// CenterY is the distance above the baseline (y=0) to the y center-point height of this asset.
    /// Y is considered to be the *vertical* (up) direction and by convention rest on the plane y=0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterX {
      get { return centerX_; }
      set {
        centerX_ = value;
      }
    }

    /// <summary>Field number for the "CenterY" field.</summary>
    public const int CenterYFieldNumber = 6;
    private float centerY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterY {
      get { return centerY_; }
      set {
        centerY_ = value;
      }
    }

    /// <summary>Field number for the "CenterZ" field.</summary>
    public const int CenterZFieldNumber = 7;
    private float centerZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterZ {
      get { return centerZ_; }
      set {
        centerZ_ = value;
      }
    }

    /// <summary>Field number for the "ExtentsX" field.</summary>
    public const int ExtentsXFieldNumber = 10;
    private float extentsX_;
    /// <summary>
    /// Extents specify the extents as distance from the center to the extent of the asset on each axis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtentsX {
      get { return extentsX_; }
      set {
        extentsX_ = value;
      }
    }

    /// <summary>Field number for the "ExtentsY" field.</summary>
    public const int ExtentsYFieldNumber = 11;
    private float extentsY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtentsY {
      get { return extentsY_; }
      set {
        extentsY_ = value;
      }
    }

    /// <summary>Field number for the "ExtentsZ" field.</summary>
    public const int ExtentsZFieldNumber = 12;
    private float extentsZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtentsZ {
      get { return extentsZ_; }
      set {
        extentsZ_ = value;
      }
    }

    /// <summary>Field number for the "LocalURI" field.</summary>
    public const int LocalURIFieldNumber = 30;
    private string localURI_ = "";
    /// <summary>
    /// Not normally persistent and available for dynamic use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalURI {
      get { return localURI_; }
      set {
        localURI_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 31;
    private string tags_ = "";
    /// <summary>
    /// Comma delimited and whitespace-trimmed list of of tags  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShortDesc" field.</summary>
    public const int ShortDescFieldNumber = 32;
    private string shortDesc_ = "";
    /// <summary>
    /// A short phrase or fragment describing this asset, starting with an article where appropriate. e.g.:
    ///      "typical 6 crew member fire truck"
    ///      "leading U.S. naval ship-based helicopter"
    ///      "Texas capital building located in Austin"
    ///      "animated scared-geometry inspired flat seal"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDesc {
      get { return shortDesc_; }
      set {
        shortDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetFlags != other.AssetFlags) return false;
      if (URI != other.URI) return false;
      if (Title != other.Title) return false;
      if (NameID != other.NameID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterX, other.CenterX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterY, other.CenterY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterZ, other.CenterZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtentsX, other.ExtentsX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtentsY, other.ExtentsY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtentsZ, other.ExtentsZ)) return false;
      if (LocalURI != other.LocalURI) return false;
      if (Tags != other.Tags) return false;
      if (ShortDesc != other.ShortDesc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetFlags != global::PlanSDK.Crates.AssetFlags.NoFlags) hash ^= AssetFlags.GetHashCode();
      if (URI.Length != 0) hash ^= URI.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (NameID.Length != 0) hash ^= NameID.GetHashCode();
      if (CenterX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterX);
      if (CenterY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterY);
      if (CenterZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterZ);
      if (ExtentsX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtentsX);
      if (ExtentsY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtentsY);
      if (ExtentsZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtentsZ);
      if (LocalURI.Length != 0) hash ^= LocalURI.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (ShortDesc.Length != 0) hash ^= ShortDesc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetFlags != global::PlanSDK.Crates.AssetFlags.NoFlags) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AssetFlags);
      }
      if (URI.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(URI);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (NameID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameID);
      }
      if (CenterX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CenterX);
      }
      if (CenterY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CenterY);
      }
      if (CenterZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CenterZ);
      }
      if (ExtentsX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ExtentsX);
      }
      if (ExtentsY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ExtentsY);
      }
      if (ExtentsZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ExtentsZ);
      }
      if (LocalURI.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(LocalURI);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Tags);
      }
      if (ShortDesc.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(ShortDesc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetFlags != global::PlanSDK.Crates.AssetFlags.NoFlags) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetFlags);
      }
      if (URI.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URI);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (NameID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameID);
      }
      if (CenterX != 0F) {
        size += 1 + 4;
      }
      if (CenterY != 0F) {
        size += 1 + 4;
      }
      if (CenterZ != 0F) {
        size += 1 + 4;
      }
      if (ExtentsX != 0F) {
        size += 1 + 4;
      }
      if (ExtentsY != 0F) {
        size += 1 + 4;
      }
      if (ExtentsZ != 0F) {
        size += 1 + 4;
      }
      if (LocalURI.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LocalURI);
      }
      if (Tags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (ShortDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShortDesc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetEntry other) {
      if (other == null) {
        return;
      }
      if (other.AssetFlags != global::PlanSDK.Crates.AssetFlags.NoFlags) {
        AssetFlags = other.AssetFlags;
      }
      if (other.URI.Length != 0) {
        URI = other.URI;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.NameID.Length != 0) {
        NameID = other.NameID;
      }
      if (other.CenterX != 0F) {
        CenterX = other.CenterX;
      }
      if (other.CenterY != 0F) {
        CenterY = other.CenterY;
      }
      if (other.CenterZ != 0F) {
        CenterZ = other.CenterZ;
      }
      if (other.ExtentsX != 0F) {
        ExtentsX = other.ExtentsX;
      }
      if (other.ExtentsY != 0F) {
        ExtentsY = other.ExtentsY;
      }
      if (other.ExtentsZ != 0F) {
        ExtentsZ = other.ExtentsZ;
      }
      if (other.LocalURI.Length != 0) {
        LocalURI = other.LocalURI;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.ShortDesc.Length != 0) {
        ShortDesc = other.ShortDesc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AssetFlags = (global::PlanSDK.Crates.AssetFlags) input.ReadEnum();
            break;
          }
          case 18: {
            URI = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            NameID = input.ReadString();
            break;
          }
          case 45: {
            CenterX = input.ReadFloat();
            break;
          }
          case 53: {
            CenterY = input.ReadFloat();
            break;
          }
          case 61: {
            CenterZ = input.ReadFloat();
            break;
          }
          case 85: {
            ExtentsX = input.ReadFloat();
            break;
          }
          case 93: {
            ExtentsY = input.ReadFloat();
            break;
          }
          case 101: {
            ExtentsZ = input.ReadFloat();
            break;
          }
          case 242: {
            LocalURI = input.ReadString();
            break;
          }
          case 250: {
            Tags = input.ReadString();
            break;
          }
          case 258: {
            ShortDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BundleManifest : pb::IMessage<BundleManifest> {
    private static readonly pb::MessageParser<BundleManifest> _parser = new pb::MessageParser<BundleManifest>(() => new BundleManifest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BundleManifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlanSDK.Crates.CratesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundleManifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundleManifest(BundleManifest other) : this() {
      parentCrate_ = other.parentCrate_;
      bundlePublicName_ = other.bundlePublicName_;
      bundleBuildName_ = other.bundleBuildName_;
      assets_ = other.assets_.Clone();
      loadAllHint_ = other.loadAllHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundleManifest Clone() {
      return new BundleManifest(this);
    }

    /// <summary>Field number for the "ParentCrate" field.</summary>
    public const int ParentCrateFieldNumber = 1;
    private string parentCrate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentCrate {
      get { return parentCrate_; }
      set {
        parentCrate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BundlePublicName" field.</summary>
    public const int BundlePublicNameFieldNumber = 2;
    private string bundlePublicName_ = "";
    /// <summary>
    /// BundlePublicName is how the outside world names this bundle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundlePublicName {
      get { return bundlePublicName_; }
      set {
        bundlePublicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BundleBuildName" field.</summary>
    public const int BundleBuildNameFieldNumber = 3;
    private string bundleBuildName_ = "";
    /// <summary>
    /// BundleBuildName is how this bundle is internally named.
    /// This corresponds to the asset bundle's file name and is normalized to lower case invariant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleBuildName {
      get { return bundleBuildName_; }
      set {
        bundleBuildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Assets" field.</summary>
    public const int AssetsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::PlanSDK.Crates.AssetEntry> _repeated_assets_codec
        = pb::FieldCodec.ForMessage(82, global::PlanSDK.Crates.AssetEntry.Parser);
    private readonly pbc::RepeatedField<global::PlanSDK.Crates.AssetEntry> assets_ = new pbc::RepeatedField<global::PlanSDK.Crates.AssetEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlanSDK.Crates.AssetEntry> Assets {
      get { return assets_; }
    }

    /// <summary>Field number for the "LoadAllHint" field.</summary>
    public const int LoadAllHintFieldNumber = 20;
    private bool loadAllHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadAllHint {
      get { return loadAllHint_; }
      set {
        loadAllHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BundleManifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BundleManifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParentCrate != other.ParentCrate) return false;
      if (BundlePublicName != other.BundlePublicName) return false;
      if (BundleBuildName != other.BundleBuildName) return false;
      if(!assets_.Equals(other.assets_)) return false;
      if (LoadAllHint != other.LoadAllHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParentCrate.Length != 0) hash ^= ParentCrate.GetHashCode();
      if (BundlePublicName.Length != 0) hash ^= BundlePublicName.GetHashCode();
      if (BundleBuildName.Length != 0) hash ^= BundleBuildName.GetHashCode();
      hash ^= assets_.GetHashCode();
      if (LoadAllHint != false) hash ^= LoadAllHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParentCrate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParentCrate);
      }
      if (BundlePublicName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BundlePublicName);
      }
      if (BundleBuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BundleBuildName);
      }
      assets_.WriteTo(output, _repeated_assets_codec);
      if (LoadAllHint != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(LoadAllHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParentCrate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentCrate);
      }
      if (BundlePublicName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundlePublicName);
      }
      if (BundleBuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleBuildName);
      }
      size += assets_.CalculateSize(_repeated_assets_codec);
      if (LoadAllHint != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BundleManifest other) {
      if (other == null) {
        return;
      }
      if (other.ParentCrate.Length != 0) {
        ParentCrate = other.ParentCrate;
      }
      if (other.BundlePublicName.Length != 0) {
        BundlePublicName = other.BundlePublicName;
      }
      if (other.BundleBuildName.Length != 0) {
        BundleBuildName = other.BundleBuildName;
      }
      assets_.Add(other.assets_);
      if (other.LoadAllHint != false) {
        LoadAllHint = other.LoadAllHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ParentCrate = input.ReadString();
            break;
          }
          case 18: {
            BundlePublicName = input.ReadString();
            break;
          }
          case 26: {
            BundleBuildName = input.ReadString();
            break;
          }
          case 82: {
            assets_.AddEntriesFrom(input, _repeated_assets_codec);
            break;
          }
          case 160: {
            LoadAllHint = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CrateManifest is the top-level manifest/catalog for a PLAN asset module called a "crate".  
  /// Is contains catalog and type info that PLAN loads at runtime to know what's inside binary asset bundles without having to load them.
  ///
  /// A reference to a PLAN asset is via an asset path ID ("PID").
  /// An asset PID is a case sensitive POSIX-style pathname having the form:
  ///     assetPID := "cratePID/bundlePublicName[.BuildID]/assetName"
  ///
  /// where:
  ///     cratePID := "homeDomainName/crateID"
  /// </summary>
  public sealed partial class CrateManifest : pb::IMessage<CrateManifest> {
    private static readonly pb::MessageParser<CrateManifest> _parser = new pb::MessageParser<CrateManifest>(() => new CrateManifest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrateManifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlanSDK.Crates.CratesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrateManifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrateManifest(CrateManifest other) : this() {
      homeDomain_ = other.homeDomain_;
      crateTitle_ = other.crateTitle_;
      crateNameID_ = other.crateNameID_;
      buildID_ = other.buildID_;
      createDesc_ = other.createDesc_;
      browserBundle_ = other.browserBundle_;
      bundles_ = other.bundles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrateManifest Clone() {
      return new CrateManifest(this);
    }

    /// <summary>Field number for the "HomeDomain" field.</summary>
    public const int HomeDomainFieldNumber = 1;
    private string homeDomain_ = "";
    /// <summary>
    /// DomainName identifies the publisher of this asset crate
    ///
    /// e.g. 
    ///    "plan-systems.org"
    ///    "themushroom.farm" 
    ///    "the-smiths.family" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HomeDomain {
      get { return homeDomain_; }
      set {
        homeDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CrateTitle" field.</summary>
    public const int CrateTitleFieldNumber = 2;
    private string crateTitle_ = "";
    /// <summary>
    /// CrateTitle is a human-readable title for this crate and can change without any repercussions (i.e. is purely optical)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrateTitle {
      get { return crateTitle_; }
      set {
        crateTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CrateNameID" field.</summary>
    public const int CrateNameIDFieldNumber = 3;
    private string crateNameID_ = "";
    /// <summary>
    /// CrateNameID uniquely identifies this crate (for the given crate's publisher/home domain).
    /// This name identifies this crate and is permanent (or else existing path refs will be broken)
    ///
    /// e.g. 
    ///    "plan-app"
    ///    "about-plan-systems"
    ///    "welcome-to-plan"
    ///    "common"     
    ///    "mycology-101"     
    ///    "mycology-201"     
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrateNameID {
      get { return crateNameID_; }
      set {
        crateNameID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BuildID" field.</summary>
    public const int BuildIDFieldNumber = 4;
    private string buildID_ = "";
    /// <summary>
    /// BuildID is a short string that identifies a particular crate build/version.
    /// This value should have no spaces and only have '.', '_', or '-' (and should lead with an alpha-numeric)
    ///
    /// e.g.  "2021.1", "10308", "v1.2.0"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildID {
      get { return buildID_; }
      set {
        buildID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreateDesc" field.</summary>
    public const int CreateDescFieldNumber = 5;
    private string createDesc_ = "";
    /// <summary>
    /// CreateDesc describes this crate in a brief phrase
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateDesc {
      get { return createDesc_; }
      set {
        createDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrowserBundle" field.</summary>
    public const int BrowserBundleFieldNumber = 8;
    private string browserBundle_ = "";
    /// <summary>
    /// BrowserBundle is the name of the bundle containing assets and info used to browse this crate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrowserBundle {
      get { return browserBundle_; }
      set {
        browserBundle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bundles" field.</summary>
    public const int BundlesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::PlanSDK.Crates.BundleManifest> _repeated_bundles_codec
        = pb::FieldCodec.ForMessage(82, global::PlanSDK.Crates.BundleManifest.Parser);
    private readonly pbc::RepeatedField<global::PlanSDK.Crates.BundleManifest> bundles_ = new pbc::RepeatedField<global::PlanSDK.Crates.BundleManifest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlanSDK.Crates.BundleManifest> Bundles {
      get { return bundles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrateManifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrateManifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HomeDomain != other.HomeDomain) return false;
      if (CrateTitle != other.CrateTitle) return false;
      if (CrateNameID != other.CrateNameID) return false;
      if (BuildID != other.BuildID) return false;
      if (CreateDesc != other.CreateDesc) return false;
      if (BrowserBundle != other.BrowserBundle) return false;
      if(!bundles_.Equals(other.bundles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HomeDomain.Length != 0) hash ^= HomeDomain.GetHashCode();
      if (CrateTitle.Length != 0) hash ^= CrateTitle.GetHashCode();
      if (CrateNameID.Length != 0) hash ^= CrateNameID.GetHashCode();
      if (BuildID.Length != 0) hash ^= BuildID.GetHashCode();
      if (CreateDesc.Length != 0) hash ^= CreateDesc.GetHashCode();
      if (BrowserBundle.Length != 0) hash ^= BrowserBundle.GetHashCode();
      hash ^= bundles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HomeDomain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HomeDomain);
      }
      if (CrateTitle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CrateTitle);
      }
      if (CrateNameID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CrateNameID);
      }
      if (BuildID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BuildID);
      }
      if (CreateDesc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CreateDesc);
      }
      if (BrowserBundle.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BrowserBundle);
      }
      bundles_.WriteTo(output, _repeated_bundles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HomeDomain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HomeDomain);
      }
      if (CrateTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CrateTitle);
      }
      if (CrateNameID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CrateNameID);
      }
      if (BuildID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildID);
      }
      if (CreateDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateDesc);
      }
      if (BrowserBundle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrowserBundle);
      }
      size += bundles_.CalculateSize(_repeated_bundles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrateManifest other) {
      if (other == null) {
        return;
      }
      if (other.HomeDomain.Length != 0) {
        HomeDomain = other.HomeDomain;
      }
      if (other.CrateTitle.Length != 0) {
        CrateTitle = other.CrateTitle;
      }
      if (other.CrateNameID.Length != 0) {
        CrateNameID = other.CrateNameID;
      }
      if (other.BuildID.Length != 0) {
        BuildID = other.BuildID;
      }
      if (other.CreateDesc.Length != 0) {
        CreateDesc = other.CreateDesc;
      }
      if (other.BrowserBundle.Length != 0) {
        BrowserBundle = other.BrowserBundle;
      }
      bundles_.Add(other.bundles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HomeDomain = input.ReadString();
            break;
          }
          case 18: {
            CrateTitle = input.ReadString();
            break;
          }
          case 26: {
            CrateNameID = input.ReadString();
            break;
          }
          case 34: {
            BuildID = input.ReadString();
            break;
          }
          case 42: {
            CreateDesc = input.ReadString();
            break;
          }
          case 66: {
            BrowserBundle = input.ReadString();
            break;
          }
          case 82: {
            bundles_.AddEntriesFrom(input, _repeated_bundles_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
