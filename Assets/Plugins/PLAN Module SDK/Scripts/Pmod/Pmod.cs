// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pmod/pmod.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pmod {

  /// <summary>Holder for reflection information generated from pmod/pmod.proto</summary>
  public static partial class PmodReflection {

    #region Descriptor
    /// <summary>File descriptor for pmod/pmod.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PmodReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wbW9kL3Btb2QucHJvdG8SBHBtb2QitwEKCkFzc2V0RW50cnkSJAoKQXNz",
            "ZXRGbGFncxgBIAEoDjIQLnBtb2QuQXNzZXRGbGFncxILCgNVUkkYAiABKAkS",
            "DQoFTGFiZWwYAyABKAkSDwoHQ2VudGVyWBgFIAEoAhIPCgdDZW50ZXJZGAYg",
            "ASgCEg8KB0NlbnRlcloYByABKAISEAoIRXh0ZW50c1gYCiABKAISEAoIRXh0",
            "ZW50c1kYCyABKAISEAoIRXh0ZW50c1oYDCABKAIikAEKDkJ1bmRsZU1hbmlm",
            "ZXN0EhQKDFBhcmVudE1vZHVsZRgBIAEoCRIYChBCdW5kbGVQdWJsaWNOYW1l",
            "GAIgASgJEhcKD0J1bmRsZUJ1aWxkTmFtZRgDIAEoCRIgCgZBc3NldHMYCiAD",
            "KAsyEC5wbW9kLkFzc2V0RW50cnkSEwoLTG9hZEFsbEhpbnQYFCABKAgijAEK",
            "Dk1vZHVsZU1hbmlmZXN0EhQKDE1vZHVsZURvbWFpbhgBIAEoCRISCgpNb2R1",
            "bGVOYW1lGAIgASgJEhIKCk1vZHVsZURlc2MYBSABKAkSFQoNQnJvd3NlckJ1",
            "bmRsZRgIIAEoCRIlCgdCdW5kbGVzGAogAygLMhQucG1vZC5CdW5kbGVNYW5p",
            "ZmVzdCqIAQoKQXNzZXRGbGFncxILCgdOb0ZsYWdzEAASCwoHSXNUZXgyRBAB",
            "EgwKCElzU3ByaXRlEAISDgoKSXNNYXRlcmlhbBAEEgsKB0hhc0ljb24QEBIK",
            "CgZJc0ljb24QIBILCgdJc0dseXBoEEASDQoISXNTdHJ1Y3QQgAISDQoISXNT",
            "a3lib3gQgAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pmod.AssetFlags), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pmod.AssetEntry), global::Pmod.AssetEntry.Parser, new[]{ "AssetFlags", "URI", "Label", "CenterX", "CenterY", "CenterZ", "ExtentsX", "ExtentsY", "ExtentsZ" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pmod.BundleManifest), global::Pmod.BundleManifest.Parser, new[]{ "ParentModule", "BundlePublicName", "BundleBuildName", "Assets", "LoadAllHint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pmod.ModuleManifest), global::Pmod.ModuleManifest.Parser, new[]{ "ModuleDomain", "ModuleName", "ModuleDesc", "BrowserBundle", "Bundles" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// AssetFlags describes what kind of asset this is.
  /// </summary>
  public enum AssetFlags {
    [pbr::OriginalName("NoFlags")] NoFlags = 0,
    [pbr::OriginalName("IsTex2D")] IsTex2D = 1,
    [pbr::OriginalName("IsSprite")] IsSprite = 2,
    [pbr::OriginalName("IsMaterial")] IsMaterial = 4,
    /// <summary>
    /// HasIcon means that this Asset includes an icon with the same name (and has IsIcon set),
    /// </summary>
    [pbr::OriginalName("HasIcon")] HasIcon = 16,
    /// <summary>
    /// IsIcon means this is a scaled-down, representative 2D sprite intended to represent the primary asset.
    /// </summary>
    [pbr::OriginalName("IsIcon")] IsIcon = 32,
    /// <summary>
    /// IsGlyph means this asset is a 3D object that is more of a token or 3D icon than it is a static or fixed-sized object.
    /// They are representative of a conceptual object or node (as opposed to static aspect of reality itself).
    /// </summary>
    [pbr::OriginalName("IsGlyph")] IsGlyph = 64,
    /// <summary>
    /// IsStruct means this asset behaves like terrain, has a preset size/scale, and is to be considered a constituent part of a space or scene.
    /// e.g.  a building, a terrain formation, a patch of trees, an art installation
    /// </summary>
    [pbr::OriginalName("IsStruct")] IsStruct = 256,
    /// <summary>
    /// IsSkybox means this is a prefab containing a Skybox component.
    /// </summary>
    [pbr::OriginalName("IsSkybox")] IsSkybox = 128,
  }

  #endregion

  #region Messages
  public sealed partial class AssetEntry : pb::IMessage<AssetEntry> {
    private static readonly pb::MessageParser<AssetEntry> _parser = new pb::MessageParser<AssetEntry>(() => new AssetEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pmod.PmodReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEntry(AssetEntry other) : this() {
      assetFlags_ = other.assetFlags_;
      uRI_ = other.uRI_;
      label_ = other.label_;
      centerX_ = other.centerX_;
      centerY_ = other.centerY_;
      centerZ_ = other.centerZ_;
      extentsX_ = other.extentsX_;
      extentsY_ = other.extentsY_;
      extentsZ_ = other.extentsZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEntry Clone() {
      return new AssetEntry(this);
    }

    /// <summary>Field number for the "AssetFlags" field.</summary>
    public const int AssetFlagsFieldNumber = 1;
    private global::Pmod.AssetFlags assetFlags_ = global::Pmod.AssetFlags.NoFlags;
    /// <summary>
    /// Flags specifies properties about this asset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pmod.AssetFlags AssetFlags {
      get { return assetFlags_; }
      set {
        assetFlags_ = value;
      }
    }

    /// <summary>Field number for the "URI" field.</summary>
    public const int URIFieldNumber = 2;
    private string uRI_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URI {
      get { return uRI_; }
      set {
        uRI_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Label" field.</summary>
    public const int LabelFieldNumber = 3;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CenterX" field.</summary>
    public const int CenterXFieldNumber = 5;
    private float centerX_;
    /// <summary>
    /// CenterX and CenterZ specify the positional center of this asset (and are typically 0).
    /// CenterY is the distance above the baseline (y=0) to the y center-point height of this asset.
    /// Y is considered to be the *vertical* (up) direction and by convention rest on the plane y=0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterX {
      get { return centerX_; }
      set {
        centerX_ = value;
      }
    }

    /// <summary>Field number for the "CenterY" field.</summary>
    public const int CenterYFieldNumber = 6;
    private float centerY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterY {
      get { return centerY_; }
      set {
        centerY_ = value;
      }
    }

    /// <summary>Field number for the "CenterZ" field.</summary>
    public const int CenterZFieldNumber = 7;
    private float centerZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterZ {
      get { return centerZ_; }
      set {
        centerZ_ = value;
      }
    }

    /// <summary>Field number for the "ExtentsX" field.</summary>
    public const int ExtentsXFieldNumber = 10;
    private float extentsX_;
    /// <summary>
    /// Extents specify the extents as distance from the center to the extent of the asset on each axis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtentsX {
      get { return extentsX_; }
      set {
        extentsX_ = value;
      }
    }

    /// <summary>Field number for the "ExtentsY" field.</summary>
    public const int ExtentsYFieldNumber = 11;
    private float extentsY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtentsY {
      get { return extentsY_; }
      set {
        extentsY_ = value;
      }
    }

    /// <summary>Field number for the "ExtentsZ" field.</summary>
    public const int ExtentsZFieldNumber = 12;
    private float extentsZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtentsZ {
      get { return extentsZ_; }
      set {
        extentsZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetFlags != other.AssetFlags) return false;
      if (URI != other.URI) return false;
      if (Label != other.Label) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterX, other.CenterX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterY, other.CenterY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterZ, other.CenterZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtentsX, other.ExtentsX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtentsY, other.ExtentsY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtentsZ, other.ExtentsZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetFlags != global::Pmod.AssetFlags.NoFlags) hash ^= AssetFlags.GetHashCode();
      if (URI.Length != 0) hash ^= URI.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (CenterX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterX);
      if (CenterY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterY);
      if (CenterZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterZ);
      if (ExtentsX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtentsX);
      if (ExtentsY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtentsY);
      if (ExtentsZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtentsZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetFlags != global::Pmod.AssetFlags.NoFlags) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AssetFlags);
      }
      if (URI.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(URI);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Label);
      }
      if (CenterX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CenterX);
      }
      if (CenterY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CenterY);
      }
      if (CenterZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CenterZ);
      }
      if (ExtentsX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ExtentsX);
      }
      if (ExtentsY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ExtentsY);
      }
      if (ExtentsZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ExtentsZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetFlags != global::Pmod.AssetFlags.NoFlags) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetFlags);
      }
      if (URI.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URI);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (CenterX != 0F) {
        size += 1 + 4;
      }
      if (CenterY != 0F) {
        size += 1 + 4;
      }
      if (CenterZ != 0F) {
        size += 1 + 4;
      }
      if (ExtentsX != 0F) {
        size += 1 + 4;
      }
      if (ExtentsY != 0F) {
        size += 1 + 4;
      }
      if (ExtentsZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetEntry other) {
      if (other == null) {
        return;
      }
      if (other.AssetFlags != global::Pmod.AssetFlags.NoFlags) {
        AssetFlags = other.AssetFlags;
      }
      if (other.URI.Length != 0) {
        URI = other.URI;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.CenterX != 0F) {
        CenterX = other.CenterX;
      }
      if (other.CenterY != 0F) {
        CenterY = other.CenterY;
      }
      if (other.CenterZ != 0F) {
        CenterZ = other.CenterZ;
      }
      if (other.ExtentsX != 0F) {
        ExtentsX = other.ExtentsX;
      }
      if (other.ExtentsY != 0F) {
        ExtentsY = other.ExtentsY;
      }
      if (other.ExtentsZ != 0F) {
        ExtentsZ = other.ExtentsZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AssetFlags = (global::Pmod.AssetFlags) input.ReadEnum();
            break;
          }
          case 18: {
            URI = input.ReadString();
            break;
          }
          case 26: {
            Label = input.ReadString();
            break;
          }
          case 45: {
            CenterX = input.ReadFloat();
            break;
          }
          case 53: {
            CenterY = input.ReadFloat();
            break;
          }
          case 61: {
            CenterZ = input.ReadFloat();
            break;
          }
          case 85: {
            ExtentsX = input.ReadFloat();
            break;
          }
          case 93: {
            ExtentsY = input.ReadFloat();
            break;
          }
          case 101: {
            ExtentsZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BundleManifest : pb::IMessage<BundleManifest> {
    private static readonly pb::MessageParser<BundleManifest> _parser = new pb::MessageParser<BundleManifest>(() => new BundleManifest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BundleManifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pmod.PmodReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundleManifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundleManifest(BundleManifest other) : this() {
      parentModule_ = other.parentModule_;
      bundlePublicName_ = other.bundlePublicName_;
      bundleBuildName_ = other.bundleBuildName_;
      assets_ = other.assets_.Clone();
      loadAllHint_ = other.loadAllHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundleManifest Clone() {
      return new BundleManifest(this);
    }

    /// <summary>Field number for the "ParentModule" field.</summary>
    public const int ParentModuleFieldNumber = 1;
    private string parentModule_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentModule {
      get { return parentModule_; }
      set {
        parentModule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BundlePublicName" field.</summary>
    public const int BundlePublicNameFieldNumber = 2;
    private string bundlePublicName_ = "";
    /// <summary>
    /// BundlePublicName is how the outside world names this bundle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundlePublicName {
      get { return bundlePublicName_; }
      set {
        bundlePublicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BundleBuildName" field.</summary>
    public const int BundleBuildNameFieldNumber = 3;
    private string bundleBuildName_ = "";
    /// <summary>
    /// BundleBuildName is how this bundle is internally named.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleBuildName {
      get { return bundleBuildName_; }
      set {
        bundleBuildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Assets" field.</summary>
    public const int AssetsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Pmod.AssetEntry> _repeated_assets_codec
        = pb::FieldCodec.ForMessage(82, global::Pmod.AssetEntry.Parser);
    private readonly pbc::RepeatedField<global::Pmod.AssetEntry> assets_ = new pbc::RepeatedField<global::Pmod.AssetEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pmod.AssetEntry> Assets {
      get { return assets_; }
    }

    /// <summary>Field number for the "LoadAllHint" field.</summary>
    public const int LoadAllHintFieldNumber = 20;
    private bool loadAllHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadAllHint {
      get { return loadAllHint_; }
      set {
        loadAllHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BundleManifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BundleManifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParentModule != other.ParentModule) return false;
      if (BundlePublicName != other.BundlePublicName) return false;
      if (BundleBuildName != other.BundleBuildName) return false;
      if(!assets_.Equals(other.assets_)) return false;
      if (LoadAllHint != other.LoadAllHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParentModule.Length != 0) hash ^= ParentModule.GetHashCode();
      if (BundlePublicName.Length != 0) hash ^= BundlePublicName.GetHashCode();
      if (BundleBuildName.Length != 0) hash ^= BundleBuildName.GetHashCode();
      hash ^= assets_.GetHashCode();
      if (LoadAllHint != false) hash ^= LoadAllHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParentModule.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParentModule);
      }
      if (BundlePublicName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BundlePublicName);
      }
      if (BundleBuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BundleBuildName);
      }
      assets_.WriteTo(output, _repeated_assets_codec);
      if (LoadAllHint != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(LoadAllHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParentModule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentModule);
      }
      if (BundlePublicName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundlePublicName);
      }
      if (BundleBuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleBuildName);
      }
      size += assets_.CalculateSize(_repeated_assets_codec);
      if (LoadAllHint != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BundleManifest other) {
      if (other == null) {
        return;
      }
      if (other.ParentModule.Length != 0) {
        ParentModule = other.ParentModule;
      }
      if (other.BundlePublicName.Length != 0) {
        BundlePublicName = other.BundlePublicName;
      }
      if (other.BundleBuildName.Length != 0) {
        BundleBuildName = other.BundleBuildName;
      }
      assets_.Add(other.assets_);
      if (other.LoadAllHint != false) {
        LoadAllHint = other.LoadAllHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ParentModule = input.ReadString();
            break;
          }
          case 18: {
            BundlePublicName = input.ReadString();
            break;
          }
          case 26: {
            BundleBuildName = input.ReadString();
            break;
          }
          case 82: {
            assets_.AddEntriesFrom(input, _repeated_assets_codec);
            break;
          }
          case 160: {
            LoadAllHint = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ModuleManifest is the top-level manifest/catalog for a PLAN module.  It contains catalog and type info
  /// that PLAN loads at runtime to know what's inside binary asset bundles without having to open and access them.
  ///
  /// A reference to a PLAN asset is via an asset path ID ("PID").
  /// An asset PID is a case sensitive POSIX-style pathname having the form:
  ///     assetPID := "modulePID/bundleName[.revisionID]/assetName"
  ///
  /// where:
  ///     modulePID := "domainName/moduleName"
  /// </summary>
  public sealed partial class ModuleManifest : pb::IMessage<ModuleManifest> {
    private static readonly pb::MessageParser<ModuleManifest> _parser = new pb::MessageParser<ModuleManifest>(() => new ModuleManifest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleManifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pmod.PmodReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleManifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleManifest(ModuleManifest other) : this() {
      moduleDomain_ = other.moduleDomain_;
      moduleName_ = other.moduleName_;
      moduleDesc_ = other.moduleDesc_;
      browserBundle_ = other.browserBundle_;
      bundles_ = other.bundles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleManifest Clone() {
      return new ModuleManifest(this);
    }

    /// <summary>Field number for the "ModuleDomain" field.</summary>
    public const int ModuleDomainFieldNumber = 1;
    private string moduleDomain_ = "";
    /// <summary>
    /// DomainName is the root name of a ModuleName
    ///
    /// e.g. 
    ///    "plan-systems.org"
    ///    "themushroom.farm" 
    ///    "the-smiths.family" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleDomain {
      get { return moduleDomain_; }
      set {
        moduleDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModuleName" field.</summary>
    public const int ModuleNameFieldNumber = 2;
    private string moduleName_ = "";
    /// <summary>
    /// ModuleName names this module (for the given domain name)
    ///
    /// e.g. 
    ///    "plan-app"
    ///    "about-plan-systems"
    ///    "welcome-to-plan"
    ///    "common"     
    ///    "mycology-101"     
    ///    "mycology-201"     
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleName {
      get { return moduleName_; }
      set {
        moduleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModuleDesc" field.</summary>
    public const int ModuleDescFieldNumber = 5;
    private string moduleDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleDesc {
      get { return moduleDesc_; }
      set {
        moduleDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrowserBundle" field.</summary>
    public const int BrowserBundleFieldNumber = 8;
    private string browserBundle_ = "";
    /// <summary>
    /// BrowserBundle is the name of the bundle containing assets and info used to browse this module.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrowserBundle {
      get { return browserBundle_; }
      set {
        browserBundle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bundles" field.</summary>
    public const int BundlesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Pmod.BundleManifest> _repeated_bundles_codec
        = pb::FieldCodec.ForMessage(82, global::Pmod.BundleManifest.Parser);
    private readonly pbc::RepeatedField<global::Pmod.BundleManifest> bundles_ = new pbc::RepeatedField<global::Pmod.BundleManifest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pmod.BundleManifest> Bundles {
      get { return bundles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleManifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleManifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModuleDomain != other.ModuleDomain) return false;
      if (ModuleName != other.ModuleName) return false;
      if (ModuleDesc != other.ModuleDesc) return false;
      if (BrowserBundle != other.BrowserBundle) return false;
      if(!bundles_.Equals(other.bundles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModuleDomain.Length != 0) hash ^= ModuleDomain.GetHashCode();
      if (ModuleName.Length != 0) hash ^= ModuleName.GetHashCode();
      if (ModuleDesc.Length != 0) hash ^= ModuleDesc.GetHashCode();
      if (BrowserBundle.Length != 0) hash ^= BrowserBundle.GetHashCode();
      hash ^= bundles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModuleDomain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModuleDomain);
      }
      if (ModuleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModuleName);
      }
      if (ModuleDesc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ModuleDesc);
      }
      if (BrowserBundle.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BrowserBundle);
      }
      bundles_.WriteTo(output, _repeated_bundles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModuleDomain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleDomain);
      }
      if (ModuleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleName);
      }
      if (ModuleDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleDesc);
      }
      if (BrowserBundle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrowserBundle);
      }
      size += bundles_.CalculateSize(_repeated_bundles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleManifest other) {
      if (other == null) {
        return;
      }
      if (other.ModuleDomain.Length != 0) {
        ModuleDomain = other.ModuleDomain;
      }
      if (other.ModuleName.Length != 0) {
        ModuleName = other.ModuleName;
      }
      if (other.ModuleDesc.Length != 0) {
        ModuleDesc = other.ModuleDesc;
      }
      if (other.BrowserBundle.Length != 0) {
        BrowserBundle = other.BrowserBundle;
      }
      bundles_.Add(other.bundles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModuleDomain = input.ReadString();
            break;
          }
          case 18: {
            ModuleName = input.ReadString();
            break;
          }
          case 42: {
            ModuleDesc = input.ReadString();
            break;
          }
          case 66: {
            BrowserBundle = input.ReadString();
            break;
          }
          case 82: {
            bundles_.AddEntriesFrom(input, _repeated_bundles_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
